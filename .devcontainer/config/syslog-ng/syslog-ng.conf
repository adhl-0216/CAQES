#############################################################################
# Default syslog-ng.conf file which collects all local logs into a
# single file called /var/log/messages tailored to container usage.
#
# The changes from the stock, default syslog-ng.conf file is that we've
# dropped the system() source that is not needed and that we enabled network
# connections using default-network-drivers(). Customize as needed and
# override using the -v option to docker, such as:
#
#  docker run ...  -v "$PWD/syslog-ng.conf":/etc/syslog-ng/syslog-ng.conf
#

@version: 4.2
@include "scl.conf"

source s_local {
	internal();
};

source s_network {
	default-network-drivers(
		# NOTE: TLS support
		#
		# the default-network-drivers() source driver opens the TLS
		# enabled ports as well, however without an actual key/cert
		# pair they will not operate and syslog-ng would display a
		# warning at startup.
		#
		#tls(key-file("/path/to/ssl-private-key") cert-file("/path/to/ssl-cert"))
	);
};

source s_snort_logs {
    file("/tmp/snort.log");
};

parser p_snort {

	# regexp-parser(
    #     patterns("^(?<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+\\d{2}:\\d{2})")
    #     prefix(".snort.")
    # );
    regexp-parser(
        patterns("\\[\\d+:\\d+:\\d+\\] .*\\[Classification: (?<classification>.*?)\\] \\[Priority: (?<priority>\\d+)\\] \\{.*\\} (?<source_ip>[0-9.]+):[0-9]+ -> (?<destination_ip>[0-9.]+):[0-9]+")
        prefix(".snort.")
    );
};

destination d_local {
	file("/var/log/messages");
	file("/var/log/messages-kv.log" template("$ISODATE $HOST $(format-welf --scope all-nv-pairs)\n") frac-digits(3));
};

destination d_mqtt {
    mqtt(
        address("tcp://mosquitto:1883")
        topic("alerts")
        qos(1)
        template("$(format-json 
        timestamp=${.snort.timestamp}
        source_ip=${.snort.source_ip}
        destination_ip=${.snort.destination_ip}
        classification=${.snort.classification}
        priority=${.snort.priority}
        raw=${MESSAGE}
        )\n")
    );
};

destination d_debug {
    mqtt(
        address("tcp://mosquitto:1883")
        topic("debug")
        qos(1)
    );
};

log {
    source(s_local);
    source(s_network);
    destination(d_local);
};

log {
    source(s_snort_logs);
    parser(p_snort);
    destination(d_mqtt);
    # destination(d_debug);
};

